{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\truon\\\\OneDrive\\\\Desktop\\\\School\\\\Semester 8\\\\CS 160\\\\Project\\\\UBYelp\\\\UBYelp\\\\Ubyelp\\\\src\\\\components\\\\Settings\\\\Themes\\\\ThemeProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport ThemeContext, { initialThemeState } from \"./ThemeContext\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst themes = {\n  light: \"./light.css\",\n  dark: \"./dark.css\"\n};\n\nconst ThemeProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [darkTheme, setDarkTheme] = useState(initialThemeState.darkTheme);\n  const localStorage = window.localStorage;\n  useEffect(() => {\n    let savedThemeLocal = localStorage.getItem(\"globalTheme\") ? localStorage.getItem(\"globalTheme\") : \"false\";\n\n    if (!!savedThemeLocal) {\n      savedThemeLocal = JSON.parse(savedThemeLocal);\n      setDarkTheme(savedThemeLocal);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"globalTheme\", darkTheme);\n  }, [darkTheme]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      darkTheme,\n      setDarkTheme\n    },\n    children: /*#__PURE__*/_jsxDEV(ThemeSwitcherProvider, {\n      defaultTheme: darkTheme,\n      themeMap: themes,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ThemeProvider, \"UyUd9iz2H4ps9UeMpUKIUKvebjc=\");\n\n_c = ThemeProvider;\nexport default ThemeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["C:/Users/truon/OneDrive/Desktop/School/Semester 8/CS 160/Project/UBYelp/UBYelp/Ubyelp/src/components/Settings/Themes/ThemeProvider.js"],"names":["React","useState","useEffect","ThemeContext","initialThemeState","ThemeSwitcherProvider","themes","light","dark","ThemeProvider","children","darkTheme","setDarkTheme","localStorage","window","savedThemeLocal","getItem","JSON","parse","setItem"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,IAAuBC,iBAAvB,QAAgD,gBAAhD;AACA,SAASC,qBAAT,QAAsC,0BAAtC;;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,KAAK,EAAE,aADM;AAEbC,EAAAA,IAAI,EAAE;AAFO,CAAf;;AAKA,MAAMC,aAAa,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACtC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAACG,iBAAiB,CAACO,SAAnB,CAA1C;AAEA,QAAME,YAAY,GAAGC,MAAM,CAACD,YAA5B;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,eAAe,GAAGF,YAAY,CAACG,OAAb,CAAqB,aAArB,IAClBH,YAAY,CAACG,OAAb,CAAqB,aAArB,CADkB,GAElB,OAFJ;;AAGA,QAAI,CAAC,CAACD,eAAN,EAAuB;AACrBA,MAAAA,eAAe,GAAGE,IAAI,CAACC,KAAL,CAAWH,eAAX,CAAlB;AACAH,MAAAA,YAAY,CAACG,eAAD,CAAZ;AACD;AACF,GARQ,EAQN,EARM,CAAT;AAUAb,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,YAAY,CAACM,OAAb,CAAqB,aAArB,EAAoCR,SAApC;AACD,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;AAIA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEA,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KAA9B;AAAA,2BACE,QAAC,qBAAD;AAAuB,MAAA,YAAY,EAAED,SAArC;AAAgD,MAAA,QAAQ,EAAEL,MAA1D;AAAA,gBACGI;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA1BD;;GAAMD,a;;KAAAA,a;AA4BN,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ThemeContext, { initialThemeState } from \"./ThemeContext\";\r\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\r\n\r\nconst themes = {\r\n  light: \"./light.css\",\r\n  dark: \"./dark.css\"\r\n};\r\n\r\nconst ThemeProvider = ({ children }) => {\r\n  const [darkTheme, setDarkTheme] = useState(initialThemeState.darkTheme);\r\n\r\n  const localStorage = window.localStorage;\r\n\r\n  useEffect(() => {\r\n    let savedThemeLocal = localStorage.getItem(\"globalTheme\")\r\n      ? localStorage.getItem(\"globalTheme\")\r\n      : \"false\";\r\n    if (!!savedThemeLocal) {\r\n      savedThemeLocal = JSON.parse(savedThemeLocal);\r\n      setDarkTheme(savedThemeLocal);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"globalTheme\", darkTheme);\r\n  }, [darkTheme]);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ darkTheme, setDarkTheme }}>\r\n      <ThemeSwitcherProvider defaultTheme={darkTheme} themeMap={themes}>\r\n        {children}\r\n      </ThemeSwitcherProvider>\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ThemeProvider;\r\n"]},"metadata":{},"sourceType":"module"}