{"ast":null,"code":"import _classPrivateFieldLooseBase from \"C:/Users/truon/OneDrive/Desktop/School/Semester 8/CS 160/Project/UBYelp/UBYelp/Ubyelp/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"C:/Users/truon/OneDrive/Desktop/School/Semester 8/CS 160/Project/UBYelp/UBYelp/Ubyelp/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nimport mysqlConnection from \"./mysqlConnection\";\nconst accounts_table = \"account\";\nconst settings_table = \"settings\";\n\nvar _queryLogIn = /*#__PURE__*/_classPrivateFieldLooseKey(\"queryLogIn\");\n\nvar _queryValueExists = /*#__PURE__*/_classPrivateFieldLooseKey(\"queryValueExists\");\n\nvar _quickQuery = /*#__PURE__*/_classPrivateFieldLooseKey(\"quickQuery\");\n\nclass Accounts {\n  constructor() {\n    Object.defineProperty(this, _quickQuery, {\n      value: _quickQuery2\n    });\n    Object.defineProperty(this, _queryValueExists, {\n      value: _queryValueExists2\n    });\n    Object.defineProperty(this, _queryLogIn, {\n      value: _queryLogIn2\n    });\n    this.Connection = new mysqlConnection();\n    this.disconnect = this.disconnect.bind(this);\n    this.logIn = this.logIn.bind(this);\n    this.createAccount = this.createAccount.bind(this);\n    _classPrivateFieldLooseBase(this, _queryLogIn)[_queryLogIn];\n    _classPrivateFieldLooseBase(this, _queryValueExists)[_queryValueExists];\n    _classPrivateFieldLooseBase(this, _quickQuery)[_quickQuery];\n  } //Connection\n\n\n  disconnect() {\n    this.Connection.disconnect();\n  } //Log in\n\n\n  async logIn(username, password) {\n    let id = await _classPrivateFieldLooseBase(this, _queryLogIn)[_queryLogIn](username, password);\n\n    if (id == -1) {\n      throw 'Invalid login';\n    } else {\n      console.log('Account ' + id + ' logged in');\n      return id;\n    }\n  } //Create account\n\n\n  async createAccount(username, password, repeatPassword, email) {\n    //Input check\n    if (username === '') throw 'Username cannot be empty';\n    if (password !== repeatPassword) throw 'Passwords do not match';\n    if (email === '') throw 'Please provide your email'; //Non-duplicate username (email could be unique)\n\n    if (await _classPrivateFieldLooseBase(this, _queryValueExists)[_queryValueExists]('username', username)) throw 'Username already exists'; //Create id based on user hash\n\n    let id = 0;\n\n    for (let i = 0; i < username.length; i++) {\n      id += username.charCodeAt(i) + 11 * i % 7;\n    } //Check if id is unique\n\n\n    while (await _classPrivateFieldLooseBase(this, _queryValueExists)[_queryValueExists]('account_id', id)) id += 1; //Add to database\n\n\n    let query = 'INSERT INTO ' + accounts_table + ' (`email`, `username`, `password`, `account_id`) VALUES (\\'' + email + '\\', \\'' + username + '\\', \\'' + password + '\\', ' + id + ')';\n    await _classPrivateFieldLooseBase(this, _quickQuery)[_quickQuery](query); //Create settings entry\n\n    query = 'INSERT INTO ' + settings_table + ' (`account_id`) VALUES (' + id + ')';\n    await _classPrivateFieldLooseBase(this, _quickQuery)[_quickQuery](query);\n    console.log('Account created');\n    return id;\n  } //[Recover password (send email)]\n\n\n}\n\nfunction _queryLogIn2(username, password) {\n  return new Promise((resolve, reject) => {\n    const query = 'SELECT account_id FROM ' + accounts_table + ' WHERE username=\\'' + username + '\\' AND password=\\'' + password + '\\'';\n    this.Connection.query(query, function (err, rows, fields) {\n      if (err) reject(err);\n\n      if (rows.length != 1) {\n        resolve(-1);\n      } else {\n        resolve(rows[0].account_id);\n      }\n    });\n  });\n}\n\nfunction _queryValueExists2(column, value) {\n  return new Promise((resolve, reject) => {\n    const query = 'SELECT ' + column + ' FROM ' + accounts_table + ' WHERE ' + column + '=\\'' + value + '\\'';\n    this.Connection.query(query, function (err, rows, fields) {\n      if (err) reject(err);\n      resolve(rows.length != 0);\n    });\n  });\n}\n\nfunction _quickQuery2(query) {\n  return new Promise((resolve, reject) => {\n    this.Connection.query(query, function (err, rows, fields) {\n      if (err) reject(err);\n      resolve();\n    });\n  });\n}\n\nmodeule.exports = Accounts;\n\nasync function test() {\n  let accounts = new Accounts(); //await accounts.logIn('user', 'password');\n\n  try {\n    await accounts.logIn('myUser', 'pass');\n  } catch (error) {\n    console.log(error);\n  }\n\n  accounts.disconnect();\n} //test();","map":{"version":3,"sources":["C:/Users/truon/OneDrive/Desktop/School/Semester 8/CS 160/Project/UBYelp/UBYelp/Ubyelp/src/components/AccountsBackend.js"],"names":["mysqlConnection","accounts_table","settings_table","Accounts","constructor","Connection","disconnect","bind","logIn","createAccount","username","password","id","console","log","repeatPassword","email","i","length","charCodeAt","query","Promise","resolve","reject","err","rows","fields","account_id","column","value","modeule","exports","test","accounts","error"],"mappings":"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","sourcesContent":["import mysqlConnection from \"./mysqlConnection\";\r\n\r\nconst accounts_table = \"account\";\r\nconst settings_table = \"settings\";\r\n\r\nclass Accounts {\r\n    constructor() {\r\n        this.Connection = new mysqlConnection();\r\n\r\n        this.disconnect = this.disconnect.bind(this);\r\n        this.logIn = this.logIn.bind(this);\r\n        this.createAccount = this.createAccount.bind(this);\r\n\r\n        this.#queryLogIn;\r\n        this.#queryValueExists;\r\n        this.#quickQuery;\r\n    }\r\n\r\n    //Connection\r\n    disconnect() {\r\n        this.Connection.disconnect();\r\n    }\r\n\r\n    //Log in\r\n    async logIn(username, password) {\r\n        let id = await this.#queryLogIn(username, password);\r\n        if (id == -1) {\r\n            throw 'Invalid login';\r\n        } else {\r\n            console.log('Account '+ id + ' logged in')\r\n            return id;\r\n        }\r\n    }\r\n\r\n    //Create account\r\n    async createAccount(username, password, repeatPassword, email) {\r\n        //Input check\r\n        if (username === '') throw 'Username cannot be empty';\r\n        if (password !== repeatPassword) throw 'Passwords do not match';\r\n        if (email === '') throw 'Please provide your email';\r\n\r\n        //Non-duplicate username (email could be unique)\r\n        if (await this.#queryValueExists('username', username)) throw 'Username already exists';\r\n\r\n        //Create id based on user hash\r\n        let id = 0;\r\n        for (let i = 0; i < username.length; i++) {\r\n            id += username.charCodeAt(i) + (11 * i % 7);\r\n        }\r\n\r\n        //Check if id is unique\r\n        while (await this.#queryValueExists('account_id', id)) id += 1;\r\n\r\n        //Add to database\r\n        let query = 'INSERT INTO ' + accounts_table + ' (`email`, `username`, `password`, `account_id`) VALUES (\\'' + email + '\\', \\'' + username + '\\', \\'' + password + '\\', ' + id + ')';\r\n        await this.#quickQuery(query);\r\n\r\n        //Create settings entry\r\n        query = 'INSERT INTO ' + settings_table + ' (`account_id`) VALUES (' + id + ')';\r\n        await this.#quickQuery(query);\r\n\r\n        console.log('Account created');\r\n        return id;\r\n    }\r\n\r\n    //[Recover password (send email)]\r\n\r\n    #queryLogIn(username, password) {\r\n        return new Promise((resolve, reject) => {\r\n            const query = 'SELECT account_id FROM ' + accounts_table + ' WHERE username=\\'' + username + '\\' AND password=\\'' + password + '\\'';\r\n            this.Connection.query(query, function (err, rows, fields) {\r\n                if (err) reject(err);\r\n                if (rows.length!=1) {\r\n                    resolve(-1);\r\n                } else {\r\n                    resolve(rows[0].account_id);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    #queryValueExists(column, value) {\r\n        return new Promise((resolve, reject) => {\r\n            const query = 'SELECT ' + column + ' FROM ' + accounts_table + ' WHERE ' + column + '=\\'' + value + '\\'';\r\n            this.Connection.query(query, function (err, rows, fields) {\r\n                if (err) reject(err);\r\n                resolve(rows.length != 0);\r\n            });\r\n        });\r\n    }\r\n\r\n    #quickQuery(query) {\r\n        return new Promise((resolve, reject) => {\r\n            this.Connection.query(query, function (err, rows, fields) {\r\n                if (err) reject(err);\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nmodeule.exports = Accounts;\r\n\r\nasync function test() {\r\n    let accounts = new Accounts();\r\n    //await accounts.logIn('user', 'password');\r\n    try {\r\n        await accounts.logIn('myUser', 'pass');\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n    accounts.disconnect();\r\n}\r\n\r\n//test();\r\n"]},"metadata":{},"sourceType":"module"}